@{
    ViewBag.Title = "ASP.NET Core Example";
}

<header class="intro-header green-cover">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="page-heading">
                    <h1 class="font-light">ASP.NET Core 1.0 App</h1>
                    <hr class="small">
                    <span class="subheading font-light">Create a smallest ASP.NET Core application with C#</span>
                </div>
            </div>
        </div>
    </div>
</header>

<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <p>
                    Here, we'll see that how to create a most basic ASP.NET Core MVC application from a C# Console App. As we know that ASP.NET Core apps, at their central, are .NET Console Apps. It means they have an entry point i.e. Main() method as it is found in Console Apps.
                    We usually don't develop our ASP.NET Core applications the way that I'm about to show, instead, we use a per-built template generated by .NET Core CLI or Yeoman. The purpose of this post is to show how ASP.NET Core applications work under the hood with .NET Core.
                </p>
                <p>So lets start by initiating a new Console App. You can get a boilerplate of this app either using Yeoman "aspnet" Generator or using .NET Core CLI as:</p>
                <div class="code-block">
                    <pre class="prettyprint linenums">
dotnet new
</pre>
                </div>
                <p>This will create a project with <i>project.json</i> and <i>Program.cs</i> files as we have seen in the previous post. Now we have the console app, so what we are about to do is:</p>
                <ul class="list-group font-light">
                    <li class="list-group-item">Download an instance of Kestrel Web Server and MVC middleware via NuGet</li>
                    <li class="list-group-item">Configure, build and run the server in <i>Program.cs</i> class</li>
                    <li class="list-group-item">Setup <i>Startup.cs</i> for our DI services and middlewares</li>
                    <li class="list-group-item">Setup the MVC components and Run the application</li>
                </ul>
                <p>Now open the <i>project.json</i> file and add following packages as framework dependencies:</p>
                <div class="code-block">
                    <pre class="prettyprint linenums">
  "frameworks": {
    "netcoreapp1.0": {
      "dependencies": {
        "Microsoft.NETCore.App": {
          "type": "platform",
          "version": "1.0.0"
        },
        "Microsoft.AspNetCore.Mvc": "1.0.0",    //Use the latest version of the package
        "Microsoft.AspNetCore.Server.Kestrel": "1.0.0"    //Use the latest version of the package
      },
      "imports": "dnxcore50"
    }
  }
</pre>
                </div>
                <p>Also don't forget to set preserveCompilationContext to true in build section of <i>project.json</i> as:</p>
                <div class="code-block">
                    <pre class="prettyprint linenums">
 "buildOptions": {
    "debugType": "portable",
    "emitEntryPoint": true,
    "preserveCompilationContext": true  //Set to true
  },
</pre>
                </div>
                <p>And restore the CoreFx packages by typing in the terminal:</p>
                <div class="code-block">
                    <pre class="prettyprint linenums">
dotnet restore
</pre>
                </div>
                <p>Now we have MVC and Kestrel web server. Open-up this folder in a text-editor and we have to setup, build and run this Kestrel web server in the Main method of <i>Program.cs</i> class. So modify the code in <i>Program.cs</i> as:</p>
                <div>

                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs font-light" role="tablist">
                        <li role="presentation" class="active"><a role="tab" data-toggle="tab">Program.cs</a></li>
                    </ul>

                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active" id="home">
                            <pre class="prettyprint linenums">
using System;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace WebApplication1
{
    public class Program
    {
        public static void Main(string[] args)
        {
            new WebHostBuilder()    //This creates a new web host
                .UseKestrel()       //Use the Kestrel web server that we just added with NuGet
                .UseContentRoot(Directory.GetCurrentDirectory())   // Use the current working as root directory for the host 
                .UseStartup&ltStartup&gt()  //Use Startup class for application configuration
                .Build()    //Build the server
                .Run();     //Run the server
        }
    }
}
</pre>
                        </div>
                    </div>

                </div>
                <p>Next, create a <i>Startup.cs</i> class at the root of the project. This <i>Startup.cs</i> will be used to configure the Dependency Injection services and ASP.NET Core middlewares in our application. For simplicity, We will setup only MVC middleware here.</p>
                 <p>We use fluent way of calling the methods. Each method purpose is shown in the comments. Now open up the <i>Startup.cs</i> class and add the following code to configure the MVC middleware.</p>
                <div>

                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs font-light" role="tablist">
                        <li role="presentation" class="active"><a role="tab" data-toggle="tab">Startup.cs</a></li>
                    </ul>

                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active" id="home">
                            <pre class="prettyprint linenums">
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace WebApplication1
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();  //Add MVC for use as a DI service
        }

        public void Configure(IApplicationBuilder app)
        {
            //Configure the MVC middleware for defining the default MVC route
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });

            //You can also use this short hand method instead of the above if you have a "Home" controller and "Index" action.
            //app.UseMvcWithDefaultRoute();
        }
    }
}
</pre>
                        </div>
                    </div>
                </div>
                <p>As you can see in the <i>Startup.cs</i> class that it uses a number of namespaces and 2 methods, <i>ConfigureServices()</i>, which is used for registering the DI dependencies in the DI container and <i>Configure()</i> method is used to configure middlewares in the application's HTTP pipeline. Here, we are only using the MVC middleware.</p>
                <p>Now create a directory structure such that it follows the conventions like:</p>
                <pre class="folder-structure">
WebApplication1 
    |
    |__Controllers
    |   |       
    |   |__ HomeController.cs
    |
    |__Views
    |   |
    |   |__Home
    |       |
    |       |__ Index.cshtml
    |
    |__ project.json
    |__ Startup.cs
    |__ Program.cs

</pre>
                <p>Next create a HomeController class in the Controllers folder which will handle HTTP requests with an Index action as:</p>
                <div>

                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs font-light" role="tablist">
                        <li role="presentation" class="active"><a role="tab" data-toggle="tab">HomeController.cs</a></li>
                    </ul>

                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active" id="home">
                            <pre class="prettyprint linenums">
using Microsoft.AspNetCore.Mvc;

namespace WebApplication1
{
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }
}
</pre>
                        </div>
                    </div>
                </div>
                <p></p>
                <blockquote>
                    Make sure that you put all the required namespaces in each .cs file.
                </blockquote>
                <p>And an <i>Index.cshtml</i> View in <i>Views > Home</i> folder, which will respond (returned) upon HomeController's Index action, displaying a message. Such as:</p>
                <div>

                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs font-light" role="tablist">
                        <li role="presentation" class="active"><a role="tab" data-toggle="tab">Index.cshtml</a></li>
                    </ul>

                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active" id="home">
                            <pre class="prettyprint linenums">
&lth2&gtHello World!&lt/h2&gt
</pre>
                        </div>
                    </div>
                </div>
                <p>Now you have everything setup, just run the application by typing in the terminal:</p>
                <div class="code-block">
                    <pre class="prettyprint linenums">
dotnet run
</pre>
                </div>
                <p>And you will see that Kestrel web server has been launched and listening to <i>localhost:5000</i>:</p>
                <div>
                    <img src="~/images/Fundamentals/kestrel-running.png" class="img-responsive center-block" alt="Angular-Architecture-1" />
                </div>
                <p>Navigate to <i>localhost:5000</i> and you will see that our application is up and running in the browser.</p>
                <div>
                    <img src="~/images/Fundamentals/kestrel-helloworld.png" class="img-responsive center-block" alt="Angular-Architecture-1" />
                </div>
            </div>
        </div>
        <div class="row">
            <environment names="Staging,Production">
                <div class="col-md-12">
                    <hr />
                    @await Component.InvokeAsync("Comment")
                </div>
            </environment>
        </div>
    </div>
</article>